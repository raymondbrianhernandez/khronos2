@* Manage.cshtml *@
@page
@model PublicTalk_Manager.Pages.ManageModel
@{
    ViewData["Title"] = "Manage Brothers - Khronos Pro 2";
}

@if (Model.Admin?.ToLower() != "super admin" && Model.Admin?.ToLower() != "pt admin")
{
    @await Html.PartialAsync("_PublicView")
    @* @Model.Admin
    @Model.JwtClaims["Admin"] *@
}
else
{
    <h4>Manage Local Speakers of @Model.JwtClaims["Congregation"] Congregation</h4>

    <form method="post">
        @using System.Security.Claims

        <div class="form-group row">
            <label for="name" class="col-sm-3 col-form-label font-weight-bold"><b>Add new local speaker</b></label>
            <div class="col-sm-7">
                <input type="hidden" name="congregation" value="@HttpContext.User.FindFirstValue("congregation")" />
                <input type="text" class="form-control" name="name" placeholder="Name" required />
            </div>
            <div class="col-sm-2">
                <button type="submit" class="btn btn-primary btn-block">Add</button>
            </div>
        </div>

        <div class="form-group row">
            <label for="privilege" class="col-sm-3 col-form-label font-weight-bold"><b>Set Privilege</b></label>
            <div class="col-sm-7">
                <select class="form-control" name="privilege" required>
                    <option value="Elder">Elder</option>
                    <option value="Servant">Servant</option>
                </select>
            </div>
            <div class="col-sm-2">
                <button type="button" class="btn btn-success btn-block" onclick="clearForm()">Clear</button>
            </div>
        </div>
    </form>

    <table class="table table-bordered">
        <thead class="bg-dark text-white">
            <tr>
                <th style="width: 5%;"><span class="font-weight-bold">#</span></th>
                <th style="width: 50%;"><span class="font-weight-bold">Name</span></th>
                <th style="width: 10%; text-align: center;"><span class="font-weight-bold">Privilege</span></th>
                <th style="width: 10%; text-align: center;"><span class="font-weight-bold">Talk Counter</span></th>
                <th style="width: 25%; text-align: center;"><span class="font-weight-bold">Actions</span></th>
            </tr>
        </thead>
        <tbody>
            @if (Model.Speakers != null && Model.Speakers.Any())
            {
                foreach (var speaker in Model.Speakers)
                {
                    <tr data-id="@speaker.Id">
                        <td><b>@(Model.Speakers.IndexOf(speaker) + 1)</b></td>
                        <td class="name-cell">@speaker.Name</td>
                        <td class="privilege-cell text-center">@speaker.Privilege</td>
                        <td class="talk-counter-cell text-center">@speaker.Talk_Counter</td>
                        <td class="text-center">
                            <button class="btn btn-warning btn-edit" data-id="@speaker.Id">Edit</button>
                            <button class="btn btn-primary btn-save" data-id="@speaker.Id" style="display: none;">Save</button>
                            <button class="btn btn-danger btn-delete" data-id="@speaker.Id">Delete</button>
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr><td colspan="5">No speakers found.</td></tr>
            }
        </tbody>
    </table>


    @* JWT CLAIMS (Debugging Purposes) *@
    @*<table> 
        <tr><th>JWT CLAIM</th><th>VALUE</th></tr>
        <tr><td><b>Admin Level:</b></td><td>@Model.JwtClaims["Admin"]</td></tr>
        <tr><td><b>Name:</b></td><td>@Model.JwtClaims["Owner"]</td></tr>
        <tr><td><b>Congregation:</b></td><td>@Model.JwtClaims["Congregation"]</td></tr>
        <tr><td><b>Username:</b></td><td>@Model.JwtClaims["Username"]</td></tr>
        <tr><td><b>is Logged In?:</b></td><td>@Model.JwtClaims["IsLoggedIn"]</td></tr>
    </table>*@

    @section scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            document.querySelectorAll(".btn-edit").forEach(button => {
                button.addEventListener("click", function (e) {
                    const row = e.target.closest('tr');
                    const nameCell = row.querySelector(".name-cell");
                    const privilegeCell = row.querySelector(".privilege-cell");
                    const talkCounterCell = row.querySelector(".talk-counter-cell");

                    const currentName = nameCell.textContent;
                    const currentPrivilege = privilegeCell.textContent;
                    const currentTalkCounter = talkCounterCell.textContent;

                    nameCell.innerHTML = `<input type="text" class="form-control" value="${currentName}">`;
                    privilegeCell.innerHTML = `
                        <select class="form-control">
                            <option ${currentPrivilege === "Elder" ? "selected" : ""}>Elder</option>
                            <option ${currentPrivilege === "Servant" ? "selected" : ""}>Servant</option>
                        </select>
                    `;
                    talkCounterCell.innerHTML = `<input type="text" class="form-control talk-counter-input" value="${currentTalkCounter}">`;

                    // Show the "save" button and hide the "edit" button
                    e.target.style.display = "none";
                    row.querySelector(".btn-save").style.display = "inline-block";
                });
            });

            document.querySelectorAll(".btn-delete").forEach(button => {
                button.addEventListener("click", function (e) {
                    const row = e.target.closest('tr');
                    const id = row.getAttribute("data-id");

                    // Confirm the delete action
                    const confirmDelete = window.confirm("Are you sure you want to delete this speaker?");
                    if (!confirmDelete) return;

                    // Send the delete request to the server via the API
                    fetch(`/api/speakers/delete/${id}`, {
                        method: 'DELETE',
                    })
                        .then(response => {
                            if (response.ok) {
                                window.location.reload();
                            } else {
                                console.error('Server responded with status:', response.status);
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                        });
                });
            });

            document.addEventListener("click", function (e) {
                if (e.target.classList.contains("btn-save")) {
                    const row = e.target.closest('tr');
                    const id = row.getAttribute("data-id");

                    const updatedName = row.querySelector(".name-cell input").value;
                    const updatedPrivilege = row.querySelector(".privilege-cell select").value;
                    const updatedTalkCounter = row.querySelector(".talk-counter-cell input").value;

                    // Send the updated data to the server via the API
                    const speakerData = {
                        Id: id,
                        Name: updatedName,
                        Privilege: updatedPrivilege,
                        Talk_Counter: updatedTalkCounter // Ensure this matches the DTO property name
                    };

                    fetch("/api/speakers/edit", {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(speakerData)
                    })
                        .then(response => {
                            if (response.ok) {
                                window.location.reload();
                            } else {
                                console.error('Server responded with status:', response.status);
                            }
                        })
                        .catch(error => {
                            console.error('Error:', error);
                        });
                }
            });
        });
    </script>

    <script>
        function clearForm() {
            document.querySelector('[name="name"]').value = '';
            document.querySelector('[name="privilege"]').selectedIndex = 0;
        }
    </script>
    }
}
